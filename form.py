from Features import *

list_request = "Введите последовательность чисел:"
min_num_request = 'Укажите число "От":'
max_num_request = 'Укажите число "До":'
num_request = "Введите число:"
input_library_with_nums = {
    # --MathOperations--#################################################################################################
    "Пути таблицы": ("Ints", MathOperations.count_paths_in_table,
                     (num_request,),
                     "Все пути через таблицу {user_inputs[0]}*{user_inputs[0]}:",
                     "Находит количество всех путей в таблице."),
    "Действие": ("Op_acListInt", MathOperations.perform_action,
                 ("Введите оператор:", list_request),
                 "{user_inputs[0]} приведенной последовательности чисел:",
                 "Действие над списком чисел."),
    "Кратные": ("MoreLess", MathOperations.generate_multiples,
                (max_num_request, "Введите искомое кратное число:"),
                "Числа кратные {user_inputs[1]} до {user_inputs[0]}:",
                "Поиск кратных чисел."),
    "Квадрат суммы": ("Ints", MathOperations.square_of_sum,
                      (num_request,),
                      "Квадрат суммы:",
                      "Находит квадрат суммы чисел."),
    "Сумма квадратов": ("Ints", MathOperations.sum_of_squares,
                        (num_request,),
                        "Сумма квадратов:",
                        "Находит сумму квадратов чисел."),
    "Парные": ("TypeList", MathOperations.filter_even_odd,
               (list_request, 'Найти "!=" или "=="?:'),
               "{user_inputs[1]} числа:",
               "Находит четные\\нечетные числа."),
    "Сравнение":
        ("TypeList", MathOperations.compare_numbers,
         (f"{list_request} 1", 'Найти "==" числа или "!="?:', f"{list_request} 2"),
         "{user_inputs[1]} числа:",
         "Сравнение чисел."),
    "Собственные степени":
        ("Ints", MathOperations.calculate_own_degrees,
         (max_num_request, "Сколько псолединх цифр вывести?:"),
         "Последние {user_inputs[1]} цифр суммы 1^1 + ... + {user_inputs[0]}^{user_inputs[0]}:",
         "Вычисляет сумму всех n^n для n от 1 до 1000, а затем получает последние x цифр этого результата."),
    "Аппроксимация 'e'": ("Ints", MathOperations.e_approx, ("Введите желаемое приближение",),
                          "Числитель и Знаменатель {user_inputs[0]} приближения:",
                          "Вычисляет приближенную дробь для числа e с использованием разложения в непрерывную дробь."),
    "Период разложения": (
        "Ints", MathOperations.sqrt_approx, (num_request,), "Период разложения √{user_inputs[0]}:",
        "Вычисляет период разложения в цепную дробь для квадратного корня числа."),
    "Нечетные периоды": ("Ints",
                         MathOperations.sqrts_odd_period,
                         (num_request,),
                         "Количество чисел с нечетным периодом среди квадратных корней до {user_inputs[0]}:",
                         "Возвращает количество чисел от 2 до n-1,"
                         " у которых период разложения квадратного корня в цепную дробь нечетный."),
    "Приближения квадратного корня":
        ("Ints",
         MathOperations.approximations_square_root, (max_num_request,),
         "Приближения √2 с числителем длиннее знаменателя: ",
         "Возвращает приближения, в которых числитель содержит больше цифр, чем знаменатель."),
    "Кубические перестановки":
        ("Ints",
         MathOperations.cub_permutations, ("Введите количество перестановок-кубов:",),
         "Кубические числа с {user_inputs[0]} перестановками: ",
         "Находит наименьшее кубическое число, c заданным количество перестановок из одинаковых цифр."),
    "Диофантово уравнение": ("Ints", MathOperations.diophantine_equation, (max_num_request,),
                             "Максимальные x, D, y Диофантова уравнения при D <= {user_inputs[0]}:",
                             "Ищет максимальное значение x и соответствующее ему y среди решений уравнения Пелля."),
    #   "Name":(check_method, func, (requests->user_inputs), result_str, describe),
    # --Pythagorean--####################################################################################################
    "Тройка Пифагора 1": ("Ints", Pythagorean.pythagorean_triple_1,
                          (num_request,),
                          "a = {reply[0]}, b = {reply[1]}, c = {reply[2]}.",
                          "Находит \"a, b, c\", если известно \"a + b + c\"."),
    "Тройка Пифагора 2": ("Ints", Pythagorean.pythagorean_triple_2,
                          (num_request,), "a, b = {reply}.",
                          "Находит \"a, b\", если известно \"c^2\"."),
    "Целые прямоугольные треугольники": ("Ints", Pythagorean.whole_right_triangles,
                                         (max_num_request,),
                                         "Результат: {reply[0]}, Длинна: {reply[1]}, Периметр: {reply[2]}.\n",
                                         "Функция находит значение периметра p<=max, которое дает максимальное\n "
                                         "количество Пифагоровых троек, и возвращает список найденных троек,\n"
                                         " их количество и значение p."),
    # --Collatz--########################################################################################################
    "Числа Коллатца": ("Ints", Collatz.collatz,
                       ("Введите начальное число:",),
                       "Последовательность Коллатца начиная с {user_inputs[0]}:",
                       "Находит последовательность Коллатца для числа."),
    "Длинна Коллатца":
        ("Ints", Collatz.find_longest_collatz,
         (max_num_request,),
         "Длинна последовательности - {reply[0]}, начальное число до {user_inputs[0]} - {reply[1]}.",
         "Находит самую длинную последовательность Коллатца с ограничением для первого."),
    # --Dividers--#######################################################################################################
    "Делители": ("Ints", Dividers.find_divisors,
                 (num_request,),
                 "Делители числа {user_inputs[0]}:",
                 "Находит все делители числа."),
    "Дружественный числа": ("Ints", Dividers.find_friendly_numbers, (max_num_request,),
                            "Дружественный числа до {user_inputs[0]}:",
                            "Находит дружественный числа до заданного числа."),
    "Проверка делителей":
        ("Op_coListInt", Dividers.check_divisors,
         ['Оператор "<" или ">" ?:', list_request, "Введите количество делителей:"],
         "Числа и их количество делителей {user_inputs[0]}{user_inputs[1]}:",
         "Находит числа, у которых количество делителей больше или меньше указанного числа."),
    # --Sequences--######################################################################################################
    "Числовая спираль": ("Even", Sequences.spiral_diagonals_sum, (num_request,),
                         "Cумма чисел в диагоналях спирали: {reply}",
                         "Вычисляет сумму всех чисел, расположенных на диагоналях."),
    "Треугольные числа": ("MoreLess/Int", Sequences.triangular_numbers,
                          (max_num_request,),
                          "Треугольные числа до {user_inputs[0]}:",
                          "Находит треугольные числа до указанного \"x\"."),
    "Фибоначчи": ("Ints", Sequences.fibonacci,
                  (max_num_request,),
                  "Числа Фибоначчи до {user_inputs[0]}:",
                  "Поиск чисел Фибоначчи."),
    "Закодированные треугольные числа":
        ("ListStr", Sequences.count_triangular_words, ("Введите слова через запятую:",),
         "Количество треугольных слов:",
         "Определяет количество слов в списке, которые имеют значение, равное треугольным числам.\n"
         "Значение слова определяется как сумма значений его букв (A=1, B=2 и т.д.)."),
    "Треугольные пятиугольные шестиугольные":
        ("Ints", Sequences.triangular_pentagonal_hexagonal, (max_num_request,),
         "{user_inputs[0]} Треугольных & Пятиугольных & Шестиугольных чисел:",
         "Нахождении всех шестиугольных чисел, которые также являетюя треугольными и пятиугольными до n."),
    "Циклические многоугольные числа":
        ("Ints",
         Sequences.cyclic_figur_nums, ("Введите количество знаков:",),
         "Циклические многоугольные числа длины {user_inputs[0]}: ",
         "Находит последовательные цикличные фигурные числа, 2 соседних числа имеют равные последние и первые цифры."),
    # --PrimeNumbers--###################################################################################################
    "Сократимые простые числа": ("Ints", PrimeNumbers.truncatable_primes, (max_num_request,),
                                 "Cумма чисел: {reply[0]}, Сократимые простые числа:",
                                 "Находит все \"усекаемые\" простые числа меньше x и вычисляет их сумму."),
    "Проверка на простоту": ("Ints", PrimeNumbers.is_prime, [num_request], "{reply}.",
                             "Проверка чисел на простоту."),
    "Простые числа": ("Ints", PrimeNumbers.prime_num,
                      (max_num_request,),
                      "Простые числа до {user_inputs[0]}:",
                      "Поиск простых чисел."),
    "Простые делители": ("Ints", PrimeNumbers.prime_divisor,
                         (num_request,),
                         "Простые делители числа {user_inputs[0]}:",
                         "Простые делители числа."),
    "Круговые простые числа": ("Ints", PrimeNumbers.circular_primes, (max_num_request,),
                               "Круговые простые числа до {user_inputs[0]}:",
                               "Вычисляет количество циклических простых чисел до заданного значения."),
    "Квадратичные простые числа":
        ("Ints", PrimeNumbers.quadratic_primes,
         (f"{num_request} b", f"{num_request} a"),
         "Максимальное количество простых чисел для последовательных значений n: {reply[0]}.\n"
         "Произведение коэффициентов a и b квадратичного выражения:",
         "Произведение коэффициентов a и b квадратичного выражения."),
    "Различные простые множители":
        ("Ints", PrimeNumbers.different_prime_factors,
         ("Введите количество уникальных делителей:", "Введите длинну последовательности:"),
         "Число являющееся началом последовательности: {reply}.",
         "Алгоритм ищет первое число, у которого есть заданное количество уникальных простых делителей (count). \n"
         "Он проверяет, что все последующие числа в заданной последовательности длиной len_subsequence также имет \n"
         "то же количество уникальных простых делителей."),
    "Сумма последовательных простых чисел":
        ("Ints", PrimeNumbers.sum_consecutive_prime_numbers,
         (max_num_request,),
         "Длинна последовательности: {reply[1]}."
         "\nCумма наибольшей последовательность простых чисел,"
         "\nкоторая является также простым числом до {user_inputs[0]}:"
         " {reply[0]}",
         "Алгоритм находит наибольшую сумму последовательных простых чисел, которая является также простым числом, \n"
         "при этом сумма не превышает заданное значение max_num."),
    "Минимальная сумма комбинированных простых чисел":
        ("Ints",
         PrimeNumbers.combining_pair_prime,
         ("Введите длинну последовательности:",),
         "Минимальная сумма комбинированных простых чисел и индексы простых чисел: ",
         "Находит мин. сумму чисел простых чисел, что формируют \"комбинированную пару\"."),
    "Уровень спирали с минимальной долей простых чисел":
        ("Ints",
         PrimeNumbers.spiral_primes, (
             "Введите минимальное отношение простых чисел к обычным на диагоналях:",),
         "Уровень спирали с долей простых чисел менее {user_inputs[0]}%: ",
         "Вычисляет уровень спирали чисел,"
         " на котором доля простых чисел на диагоналях становится меньше заданного порога."),
    "Замена цифр в простых числах":
        ("Ints",
         PrimeNumbers.replacing_prime, ("Введите нужную длинну n:",),
         "Группа из {user_inputs[0]} простых чисел, полученная заменой цифр:",
         "Ищет простые числа, в которых можно заменить цифры так, чтобы получить n количество простых чисел."),
    "Простые Мерсенна":
        ("Ints",
         PrimeNumbers.mersenne_primes,
         ("Введите максимальную степень простого числа:",),
         "Простые числа Мерсенна для диапазона до {user_inputs[0]}:",
         "Выполняет параллельную проверку чисел вида 2^p - 1 на простоту."),
    # --Palindromes--####################################################################################################
    "Палиндромы": ("MoreLess", Palindromes.find_palindromes,
                   (max_num_request, min_num_request),
                   "Числа-палиндромы от {user_inputs[1]} до {user_inputs[0]}:",
                   "Вычисляет все числа-палиндромы до указанного \"x\"."),
    "Палиндромы по обоим основаниям":
        ("MoreLess", Palindromes.double_base_palindromes,
         (max_num_request, min_num_request),
         "Палиндромы по обоим основаниям от {user_inputs[1]} до {user_inputs[0]}:",
         "Вычисляет палиндромы, которые являются палиндромами в десятичной и в двоичной системах счисления."),
    "Числа Личреля":
        ("Ints",
         Palindromes.lychrel_numbers, (max_num_request, "Введите количество итерация для проверки:"),
         "Числа Личреля до {user_inputs[0]} за {user_inputs[1]} итераций:",
         "Находит чисела, становящиеся палиндромами при реверсивном сложении за n количество итераций."),
    # --NumberOperations--###############################################################################################
    "Сумма цифр степени": ("Ints", NumberOperations.sum_of_digits_of_degree,
                           ("Введите основное число:", "Введите степень:"),
                           "Cумма цифр степени числа {user_inputs[0]}: {reply}.",
                           "Вычисляет сумму цифр числа, возведённого в заданную степень."),
    "Сумма монет": ("ListInt", NumberOperations.count_ways_to_make_change, [list_request, num_request],
                    "Cпособы составить {user_inputs[1]}:",
                    "Вычисляет количество различных способов составить определённую сумму\n"
                    "с использованием неограниченного количества монет номиналом \"x\"."),
    "Пятые степени цифр": ("Ints", NumberOperations.sum_fifth_powers_digits, (num_request,),
                           "Чисела, которые могут быть записаны в виде суммы пятых степеней их цифр:",
                           "Вычисляет сумму всех чисел, которые равны сумме пятых степеней своих цифр."),
    "Различные степени": ("MoreLess", NumberOperations.distinct_powers_count,
                          (max_num_request, min_num_request),
                          "Последовательность: {reply[0]}.\nДлинна: {reply[1]}.",
                          "Находит последовательность a**b для 2 <= a <= 100 и 2 <= b <= 100."),
    "Дробь":
        ("Ints", NumberOperations.fraction,
         (num_request,),
         "Длина периода: {reply[1]}."
         "Знаменатель с максимальной длиной периода до {user_inputs[0]}:",
         "Находит значение d < веденного пользователем для которого 1/d в десятичном виде содержит \n"
         "самую длинную повторяющуюся последовательность цифр."),
    "Перестановки": ("ListInt", NumberOperations.dictionary_permutations, (list_request, num_request),
                     "Искомая {user_inputs[1]} перестановка:",
                     "Находит конкретную перестановку среди группы чисел."),
    "Имена": ("ListStr", NumberOperations.name_score, ["Введите имена через запятую:"],
              "Сумма очков имен: {reply}.",
              "Суммирует очки имен."),
    "Факториал": ("Ints", NumberOperations.sum_digit_factorial,
                  (num_request,), "Сумма чисел факториала {user_inputs[0]}: {reply}.",
                  "Сумма чисел решенного факториала."),
    "Воскресенья":
        ("MoreLessWeek", NumberOperations.counting_sundays,
         (max_num_request, min_num_request, "Укажите день недели (Понедельник - 1, Вторник - 2 и т.д.):"),
         "Всего воскресений на 1 числа месяцев с {user_inputs[1]} до {user_inputs[0]} года: {reply}.",
         "Выводит все воскресенья попадающих на 1 число месяцев."),
    "Нок": ("Ints", NumberOperations.least_multiple, [num_request],
            "Ключевые делители - {reply[1]}."
            "Наименьшее общее кратное для чисел до {user_inputs[0]}:",
            "Поиск наименьших чисел, кратных от 1 до X."),
    "Проверка делителями": (NumberOperations.multiplication_check, ("Введите количество знаков:", list_request),
                            "Числа, образованные умножением {user_inputs[0]}-значных чисел:",
                            "Числа, образованные умножением выбранных чисел."),
    "Сортировка": ("ListInt", NumberOperations.list_sort,
                   (list_request,),
                   "Отсортированный список:",
                   "Сортирует список."),
    "Дубликаты": ("ListInt", NumberOperations.list_set,
                  (list_request,),
                  "Список без дубликатов:",
                  "Убирает дубликаты из списка."),
    "Фильтр": ("ListInt", NumberOperations.list_filter,
               (list_request, max_num_request, 'Укажите диапазон "От":'),
               "Отфильтрованный список:",
               "Отфильтровывает список."),
    "Максимальная сумма цифр в степени":
        ("Ints",
         NumberOperations.max_sum_digits,
         ("Введите максимальную основу:", "Введите максимальную степень:"),
         "Максимальная сумма цифр числа x^n при n < {user_inputs[1]}, x < {user_inputs[0]}:",
         "Находит число и его степень, сумма цифр которых максимальна."),
    "Количество сочетаний":
        ("MoreLess",
         NumberOperations.combinatorial_samples, (max_num_request, min_num_request),
         "Количество сочетаний C(n, r) > {user_inputs[0]} для 1 ≤ n ≤ {user_inputs[1]}:",
         "Определяет количество сочетаний, которые превышают заданное число в заданном диапазоне."),
    "Числа с переставленными цифрами":
        ("Ints",
         NumberOperations.multiples_rearranged_digits, (max_num_request,),
         "Первые {user_inputs[0]} чисел, у которых множители 2x, 3x, 4x, 5x и 6x имеют те же цифры:",
         "Находит числа, цифры которых остаются неизменными при умножении на 2, 3, 4, 5 и 6."),
    # --TableOperations--################################################################################################
    "Треугольник": ("TablIntOp_co", TableOperations.triangle,
                    ('Введите многострочный ввод (Введите "END" для завершения ввода):',),
                    "Наибольшее возможное число:",
                    "Находит наибольшее возможное число в треугольнике."),
    "Таблица n": ("TablIntOp_co", TableOperations.sel_num_sum_1,
                  ("Введите многострочный ввод:",
                   f"{num_request} n", "Введите оператор:"),
                  "Ответ:",
                  "Принимает числа, после чего извлекает из них первые n чисел и складывает."),
    "Таблица n2": ("TablIntOp_co", TableOperations.sel_num_sum_1,
                   ("Введите многострочный ввод:",
                    f"{num_request} n", "Введите оператор:"),
                   "Ответ:",
                   "Принимает числа, после чего складывает их и выводит первые n числа суммы числа."),
    # --Navigation--#####################################################################################################
    "Самое":
        ("TablIntOp_co", Navigation.most_navigate,
         ["Введите многострочный ввод:", "Введите количество символов:"],
         "Ответ:",
         "Находит максимальное число с выбранной длинной в любом направлении в таблице."),
}

# Словарь с методами проверок
Check_methods = {
    "Ints": [
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть не меньше нуля."),
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть не меньше нуля."),
    ],
    "TablIntOp_co": [
        ("str", lambda user_input, user_inputs: all(part.isdigit() for part in user_input.split()),
         "Строка должна содержать только числа, разделенные пробелами."),
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть больше нуля."),
        ("str", lambda user_input, user_inputs: user_input in MathOperations.operators_ac,
         "Некорректный логический оператор.")
    ],
    "Op_acListInt": [
        ("str", lambda user_input, user_inputs: user_input in MathOperations.operators_ac,
         "Некорректный логический оператор."),
        ("list", lambda user_input, user_inputs: True, ""),
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть больше нуля.")
    ],
    "TypeList": [
        ("list, int", lambda user_input, user_inputs: True, ""),
        ("str", lambda user_input, user_inputs: user_input in ["!=", "=="], "Некорректный оператор."),
        ("list, int", lambda user_input, user_inputs: True, "")
    ],
    "Op_coListInt": [
        ("str", lambda user_input, user_inputs: user_input in MathOperations.operators_co,
         "Некорректный логический оператор."),
        ("list", lambda user_input, user_inputs: True, ""),
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть больше нуля.")
    ],
    "ListInt": [
        ("list", lambda user_input, user_inputs: True, ""),
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть не меньше нуля."),
        ("int", lambda user_input, user_inputs: user_inputs[-1] > user_input,
         "Число должно быть меньше предыдущего введенного числа.")
    ],
    "MoreLess": [
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть не меньше нуля."),
        ("int", lambda user_input, user_inputs: user_inputs[-1] > user_input,
         "Число должно быть меньше предыдущего введенного числа.")
    ],
    "MoreLessWeek": [
        ("int", lambda user_input, user_inputs: user_input > 0, "Число должно быть не меньше нуля."),
        ("int", lambda user_input, user_inputs: user_inputs[-1] > user_input,
         "Число должно быть меньше предыдущего введенного числа."),
        ("int", lambda user_input, user_inputs: 0 < user_input < 7, "Число должно быть соотносимо с днем недели.")
    ],
    "ListStr": [
        ("list", lambda user_input, user_inputs: True, ""),
    ],
    "Even": [
        ("int", lambda user_input, user_inputs: user_input % 2 == 0 and user_input > 0,
         "Число должно быть четным и не меньше нуля."),
    ],
}

# Словарь для преобразования типов
Type_methods = {
    "int": (lambda user_input: int(user_input), "Ошибка. Введите число."),
    "str": (lambda user_input: str(user_input), "Ошибка. Введите строку."),
    "list, str": (lambda user_input: user_input.split(',') if ',' in user_input else False,
                  "Введите список символов, разделенных запятыми."),
    "list": (lambda user_input: list(map(int, user_input.split(','))) if ',' in user_input else False,
             "Введите список чисел, разделенных запятыми."),
    "list, int": (lambda user_input: list(map(int, user_input.split(','))) if ',' in user_input else int(user_input),
                  "Ошибка. Введите список чисел, разделенных запятыми, или одно число.")
}
